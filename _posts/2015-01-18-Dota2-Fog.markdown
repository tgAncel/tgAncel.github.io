---
layout:     post
title:      "Dota2 雾效实现剖析"
subtitle:   "The Analysis of Dota2 Fog Effect"
date:       2015-01-18 18:00:00
author:     "Ancel"
header-img: "img/post-bg-13.jpg"
tag: 迷雾，战争迷雾
category: "Game"
---
分析工具使用的是GPA.
首先看看运用雾效果之前与之后的对比图：

下图是没有运用雾效果的场景图（格式为： A2B10G10R10）
<a href="#">
    <img src="{{ site.baseurl }}/img/Dota2_Fog/BeforeFogPass.jpg" alt="WithoutFog" width= "780">
</a>
下图是运用雾效之后的场景图（格式为： A8R8G8B8）
<a href="#">
    <img src="{{ site.baseurl }}/img/Dota2_Fog/AfterFogPass.jpg" alt="WithFog" width= "780">
</a>


整个雾效是在一个后处理中实现的，整个雾效由三种迷雾组成（高度雾，战斗迷雾，距离雾），下面通过对PS Shader的汇编代码进行分析，来看各个雾效是如何实现的。


{% highlight c++ linenos %}
// 下面是从GPA中得到的PS Shader 的汇编代码
// Generated by Microsoft (R) D3DX9 Shader Compiler
//
// Parameters:
//
//   sampler2D DepthSampler;
//   sampler2D FoWSampler;
//   sampler2D FrameSampler;
//   sampler2D SpecularSampler;
//   float4 g_EyePos_SpecExponent;
//   float3 g_FoWColor;
//   float4 g_FoWParams;
//   sampler2D g_FogHeightSampler;
//   float4 g_FogParams;
//   sampler2D g_FogSampler;
//   float4 g_LinearFogColor;
//   float4 g_vFoWWorldSize;
//   float4 g_vFogHeightParms1;
//   float4 g_vFogHeightParms2;
//   float4 g_vFogHeightParms3;
//   float4 g_vFogHeightScroll;
//
//
// Registers:
//
//   Name                  Reg   Size
//   --------------------- ----- ----
//   g_FogParams           c14      1
//   g_EyePos_SpecExponent c15      1
//   g_vFoWWorldSize       c18      1
//   g_FoWColor            c19      1
//   g_FoWParams           c22      1
//   g_vFogHeightScroll    c23      1
//   g_vFogHeightParms1    c24      1
//   g_vFogHeightParms2    c25      1
//   g_vFogHeightParms3    c26      1
//   g_LinearFogColor      c29      1
//   DepthSampler          s0       1
//   SpecularSampler       s3       1
//   FrameSampler          s4       1
//   g_FogSampler          s6       1
//   g_FogHeightSampler    s7       1
//   FoWSampler            s10      1
//

    ps_3_0
    def c0, 1, 0.298900008, 0.587000012, 0.114
    def c1, -0.00999999978, 0.00999999978, -0.0009765625, 0.0009765625
    def c2, 0.25, 1, 0.5, 0
    def c3, 0.300000012, 0.589999974, 0.109999999, 0
    dcl_texcoord v0.xy           
    dcl_texcoord1 v1.xyz         
    dcl_2d s0
    dcl_2d s3
    dcl_2d s4
    dcl_2d s6
    dcl_2d s7
    dcl_2d s10
    rcp r0.x, c24.x
    texld r1, v0, s0
    mad r0.yzw, v1.xxyz, r1.x, c15.xxyz
    mad r1.xy, r0.yzzw, r0.x, c23
    mad r1.zw, r0.xyyz, r0.x, c23
    texld r2, r1, s7
    dp3 r0.x, r2, c0.yzww
    mul r0.x, r0.x, c24.z
    texld r1, r1.zwzw, s7
    mul r1.x, r1.w, c24.w
    rcp r1.y, c25.w
    add r1.zw, r0.xyyz, -c18.xyxy
    rcp r2.x, c18.z
    mul r2.z, r1.z, r2.x
    rcp r2.y, c18.w
    mad r2.w, r1.w, -r2.y, c0.x
    texld r3, r2.zwzw, s6
    mov r4.y, c24.y
    mad r2.z, r3.w, c25.x, r4.y
    add r2.z, r0.w, -r2.z
    add r0.yzw, -r0, c15.xxyz
    mul r2.w, r1.y, r2.z
    mad r1.y, r2.z, r1.y, c1.x
    cmp r1.y, r1.y, r2.w, c1.y
    min r2.z, r1.y, c0.x
    pow r1.y, r2.z, c25.y
    mad_sat r0.x, r0.x, r1.x, r1.y
    texld r4, v0, s3
    texld r5, v0, s4
    add r4.xyz, r4, r5
    mov oC0.w, r5.w
    mad r4.xyz, r3, -c26, r4
    mul r3.xyz, r3, c26
    mad r3.xyz, r0.x, r4, r3
    dp3 r0.x, r3, c3
    pow r1.x, r0.x, c22.w
    max r0.x, r1.x, c2.z
    mul r4.xyz, r0.x, c19
    mul r5.xyz, r3, c22.z
    mad r4.xyz, r4, c22.y, r5
    mad r1.xy, r1.zwzw, r2, c1.z
    texld r5, r1, s10
    mad r1.xy, r1.zwzw, r2, c1.wzzw
    texld r6, r1, s10
    add r0.x, r5.x, r6.x
    mad r1.xy, r1.zwzw, r2, c1.w
    mad r1.zw, r1, r2.xyxy, c1
    texld r2, r1, s10
    add r0.x, r0.x, r2.x
    texld r1, r1.zwzw, s10
    add r0.x, r0.x, r1.x
    mad r0.x, r0.x, -c2.x, c2.y
    lrp r1.xyz, r0.x, r4, r3
    add r2.xyz, -r1, c29
    dp3 r0.x, r0.yzww, r0.yzww
    rsq r0.x, r0.x
    rcp r0.x, r0.x
    mad_sat r0.x, r0.x, c14.w, c14.x
    min r1.w, r0.x, c14.z
    mul r0.x, r1.w, r1.w
    mad oC0.xyz, r0.x, r2, r1

// approximately 65 instruction slots used (10 texture, 55 arithmetic)
{% endhighlight %}